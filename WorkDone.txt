# 04/01/2021 to 07/01/2021
..Git commands
..CLI commands
..Git-Flow
..12Factor
..Laravel setup with sqlite (with auth) (with markdown)
..Laravel setup with MySql docker (with auth)
	..@yield('text')
	..@extends('view_name')
	..@section('text')
	..@endsection
	..{{asset('css/app.css')}}
	
	
######################################################

I. Codebase
One codebase tracked in revision control, many deploys
((our repo will be hosted in github, so it is going to pass this factor))

II. Dependencies
Explicitly declare and isolate dependencies
((we are using docker, hence no dependency issues will be there.))

III. Config
Store config in the environment
((our app will be in docker,so there will be no config issues.))

IV. Backing services
Treat backing services as attached resources.
((docker will be there..! or in laravel we can make a separate ".env" file for development and release.))

V. Build, release, run
Strictly separate build and run stages
(())

VI. Processes
Execute the app as one or more stateless processes.(Twelve-factor processes are stateless and share-nothing.)
(())

VII. Port binding
Export services via port binding
((we are running all in one docker!!!))

VIII. Concurrency
Scale out via the process model(In the twelve-factor app, processes are a first class citizen. Processes in the twelve-factor app take strong cues from the unix process model for running service daemons. )
(())

IX. Disposability
Maximize robustness with fast startup and graceful shutdown
((docker!!! is easy to start and stop once setup.))

X. Dev/prod parity
Keep development, staging, and production as similar as possible
(())

XI. Logs
Treat logs as event streams
((tail -f log1.log))

XII. Admin processes
Run admin/management tasks as one-off processes
(())
######################################################	
	
	
	
____________________________________________________________________________________
# 08/01/2021
..Laravel directory structure
	..app/Http/Controllers/ (Controller)
	..app/Models/  (Models for database)
	..resources/views/ (Views)

	[Create database model first and migrate it, then create View , and then Controller for handling data and flow. ...define routes in "web.php"]


#web.php
Route::get('/url',function_or_controller)
Route::post('/url',another_function_or_controller)  //import controller before using it
..some other http methods also..........

#Controllerz
return view('view_name')


	..@if()
	..@else
	..@endif
	..@auth
	..@endauth
	..@guest
	..@endguest
	..@error
	..@enderror
	..dd()
	..auth()->
	..redirect()->route('view_name')
	..back()
	..session('session_var')
	..route('view_name')
	..Middleware in "Kernel.php"
	..auth()->attempt([email,password],remember) //arguments are preceded by  request->
	..controller functions has (Request $request) argument when need to get data from user.
	..php artisan make:controller controller_name  [after you can edit it]
	..php artisan make:model model_name -m -f   [migration/factory//use --help for more info]        [after you can edit it]
		..
		..foreignId()->constrained()->onDelete()/id()/text()/timestamps()

#successfully created table using model and migration in MySql


____________________________________________________________________________________

# 11/01/2021
..use name() method in Route and route('name') in view.
..request->get('name_of_field')
..validate([]);
..{{old('name')}}   //retrive data of old session
..auth()->attempt(email,password as list)
..Creating a CRUD app for practice




........12 FACTOR MEETING...........
codebase
dependencies
config
resource as backing services


____________________________________________________________________________________





						  .env
						    |                        |
						    |                        |                   
						    |                        |
						    |conf1.service1          |  					
						    |___________             |
						    |                        | 					 service 1
						    |                        |
						    |                        |
						    |conf2.service2          | 						service 2
						    |______________          |	
						    |                        |
						    |                        |					service n
						    |                        | 
						    |                        |
						    |                        |
						    |						 |
						    |						 |

_______________________  		     _______________           				______________________

MAIN DRIVER CODE                     WRAPPER CLASS                             (external services like google facebook)
(written by us                       (written by us )
 and not changed even       		(new functions added
service provider changes.)           for new services)
                                     (SCALABILITY comes from here)
()
________________________________________________________________________________________________________________________________________

#12/11/2021

Laravel practice project (https://www.youtube.com/watch?v=MFh0Fd7BsjE)

........12 FACTOR MEETING...........
build,release , run
Concurrency
Processes
Disposability

....................................

command -m-f....means migration/factory,,,,,-msfc means migration/seeder/factory/controller
				..controller handles functions, data processing.
				..factory is for testing database. table definition is here.
				..seeder is for testing database. it uses table definition given in factory to insert data.
				..migration defines table structure to be created or changed in database. 


________________________________________________________________________________________________________________________________________
#13/01/2021

@if()
@elseif()
@else
@endif
@unless
@endunless
@php
@endphp
@for($i=0;$i<5;$i++)
@endfor
@foreach($pizzas as $pizza)
@endforeach
..query parameters
..create model and then..
	..$table='table_name' 